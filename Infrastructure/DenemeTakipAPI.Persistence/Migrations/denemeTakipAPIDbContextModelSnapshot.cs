// <auto-generated />
using System;
using DenemeTakipAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DenemeTakipAPI.Persistence.Migrations
{
    [DbContext(typeof(denemeTakipAPIDbContext))]
    partial class denemeTakipAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AytDenemeKonu", b =>
                {
                    b.Property<Guid>("AytDenemesYanlisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("YanlisKonularId")
                        .HasColumnType("uuid");

                    b.HasKey("AytDenemesYanlisId", "YanlisKonularId");

                    b.HasIndex("YanlisKonularId");

                    b.ToTable("AytDenemeKonu");
                });

            modelBuilder.Entity("AytDenemeKonu1", b =>
                {
                    b.Property<Guid>("AytDenemesBosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BosKonularId")
                        .HasColumnType("uuid");

                    b.HasKey("AytDenemesBosId", "BosKonularId");

                    b.HasIndex("BosKonularId");

                    b.ToTable("AytDenemeKonu1");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.AytFolder.AytDeneme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BiyolojiDogru")
                        .HasColumnType("integer");

                    b.Property<int>("BiyolojiYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("Cografya1Dogru")
                        .HasColumnType("integer");

                    b.Property<int>("Cografya1Yanlis")
                        .HasColumnType("integer");

                    b.Property<int>("Cografya2Dogru")
                        .HasColumnType("integer");

                    b.Property<int>("Cografya2Yanlis")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DilDogru")
                        .HasColumnType("integer");

                    b.Property<int>("DilYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("DinDogru")
                        .HasColumnType("integer");

                    b.Property<int>("DinYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("EdebiyatDogru")
                        .HasColumnType("integer");

                    b.Property<int>("EdebiyatYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("FelsefeDogru")
                        .HasColumnType("integer");

                    b.Property<int>("FelsefeYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("FizikDogru")
                        .HasColumnType("integer");

                    b.Property<int>("FizikYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("KimyaDogru")
                        .HasColumnType("integer");

                    b.Property<int>("KimyaYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("MatematikDogru")
                        .HasColumnType("integer");

                    b.Property<int>("MatematikYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("Tarih1Dogru")
                        .HasColumnType("integer");

                    b.Property<int>("Tarih1Yanlis")
                        .HasColumnType("integer");

                    b.Property<int>("Tarih2Dogru")
                        .HasColumnType("integer");

                    b.Property<int>("Tarih2Yanlis")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AytDenemes");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.Ders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DersAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTyt")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Dersler");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.Konu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DersId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsTyt")
                        .HasColumnType("boolean");

                    b.Property<string>("KonuAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DersId");

                    b.ToTable("Konular");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.TytFolder.TytDeneme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FenDogru")
                        .HasColumnType("integer");

                    b.Property<int>("FenYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("MatematikDogru")
                        .HasColumnType("integer");

                    b.Property<int>("MatematikYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("SosyalDogru")
                        .HasColumnType("integer");

                    b.Property<int>("SosyalYanlis")
                        .HasColumnType("integer");

                    b.Property<int>("TurkceDogru")
                        .HasColumnType("integer");

                    b.Property<int>("TurkceYanlis")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TytDenemes");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a55c5f9f-4f8c-4848-882f-0bcb3ec62171",
                            ConcurrencyStamp = "8c181708-6feb-4999-8173-24646a476851",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "128f0e53-f259-411a-b4be-e050e48c199e",
                            ConcurrencyStamp = "5759e630-5c26-4528-963c-e37a32f0fb58",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c5bc8bb5-0f4f-452a-911c-9844f7e2aac7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26e01e74-75a5-42f7-a682-f8bc16502fa6",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELQcZZGsS8wkuo5QNs4fc+q2WhDhC/QKW0jqTYyU4qB1AwHj+4PFHAuexy82MVTFFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e1d5484-2d15-439e-b774-52ab4a11b2e4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("KonuTytDeneme", b =>
                {
                    b.Property<Guid>("BosKonularId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TytDenemesBosId")
                        .HasColumnType("uuid");

                    b.HasKey("BosKonularId", "TytDenemesBosId");

                    b.HasIndex("TytDenemesBosId");

                    b.ToTable("KonuTytDeneme");
                });

            modelBuilder.Entity("KonuTytDeneme1", b =>
                {
                    b.Property<Guid>("TytDenemesYanlisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("YanlisKonularId")
                        .HasColumnType("uuid");

                    b.HasKey("TytDenemesYanlisId", "YanlisKonularId");

                    b.HasIndex("YanlisKonularId");

                    b.ToTable("KonuTytDeneme1");
                });

            modelBuilder.Entity("Microsoft.AspNet.Identity.EntityFramework.IdentityUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.ToTable("IdentityUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "c5bc8bb5-0f4f-452a-911c-9844f7e2aac7",
                            RoleId = "a55c5f9f-4f8c-4848-882f-0bcb3ec62171"
                        });
                });

            modelBuilder.Entity("AytDenemeKonu", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.AytFolder.AytDeneme", null)
                        .WithMany()
                        .HasForeignKey("AytDenemesYanlisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.Konu", null)
                        .WithMany()
                        .HasForeignKey("YanlisKonularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AytDenemeKonu1", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.AytFolder.AytDeneme", null)
                        .WithMany()
                        .HasForeignKey("AytDenemesBosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.Konu", null)
                        .WithMany()
                        .HasForeignKey("BosKonularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.AytFolder.AytDeneme", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("AytDenemes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.Konu", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.Ders", "Ders")
                        .WithMany("Konular")
                        .HasForeignKey("DersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ders");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.TytFolder.TytDeneme", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("TytDenemes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KonuTytDeneme", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.Konu", null)
                        .WithMany()
                        .HasForeignKey("BosKonularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.TytFolder.TytDeneme", null)
                        .WithMany()
                        .HasForeignKey("TytDenemesBosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KonuTytDeneme1", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.TytFolder.TytDeneme", null)
                        .WithMany()
                        .HasForeignKey("TytDenemesYanlisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DenemeTakipAPI.Domain.Entities.DenemeFolder.Konu", null)
                        .WithMany()
                        .HasForeignKey("YanlisKonularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DenemeTakipAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.DenemeFolder.Ders", b =>
                {
                    b.Navigation("Konular");
                });

            modelBuilder.Entity("DenemeTakipAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AytDenemes");

                    b.Navigation("TytDenemes");
                });
#pragma warning restore 612, 618
        }
    }
}
